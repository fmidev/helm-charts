apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontend.name }}
  labels:
    app: {{ .Values.frontend.name }}
spec:
  replicas: {{ .Values.frontend.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.frontend.name }}
      annotations:
        eks.amazonaws.com/compute-type: ec2
      {{- if .Values.frontend.commitHash }}
        commitHash: {{ .Values.frontend.commitHash }}
      {{- end }}
    spec:
    {{- if eq .Values.secretProvider "aws" }}
      serviceAccountName: {{ .Values.frontend.secretServiceAccount }}
    {{- end }}
    {{- if and .Values.frontend.useCustomConfigurationFiles (eq .Values.frontend.customConfigurationLocation "s3")}}
      initContainers:
      - name: init
        image: amazon/aws-cli
        command: ["/bin/sh"]
        args:
          - -c
          - |
            export AWS_ACCESS_KEY_ID={{ .Values.frontend.awsAccessKeyId }};
            export AWS_SECRET_ACCESS_KEY={{ .Values.frontend.awsAccessKeySecret }};
            AWS_DEFAULT_REGION={{ .Values.frontend.awsDefaultRegion }};
            aws s3 cp --recursive --exclude "*/*" s3://{{ .Values.frontend.s3bucketName }}{{ .Values.frontend.customConfigurationFolderPath }} /frontend;
        volumeMounts:
        - mountPath: "/frontend/"
          name: {{ .Values.frontend.name }}-volume
    {{- end }}
      containers:
      - name: {{ .Values.frontend.name }}
        image: {{ .Values.frontend.registry }}:{{ default .Chart.AppVersion .Values.versions.frontend }}
      {{- if .Values.frontend.imagePullPolicy }}
        imagePullPolicy: {{ .Values.frontend.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.frontend.containerPort }}
      {{- if .Values.frontend.resources }}
        resources: {{ toYaml .Values.frontend.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.frontend.livenessProbe }}
        livenessProbe: {{ toYaml .Values.frontend.livenessProbe | nindent 10 }}
      {{- end }}
      {{- if .Values.frontend.readinessProbe }}
        readinessProbe: {{ toYaml .Values.frontend.readinessProbe | nindent 10 }}
      {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.frontend.name }}
      {{- if .Values.frontend.client_id_secret }}
        env:
        - name: GW_AUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.frontend.client_id_secretName }}
              key: GW_AUTH_CLIENT_ID
      {{- end }}
        volumeMounts:
      {{- if .Values.secretProvider }}
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      {{- end }}
      {{- if and .Values.frontend.useCustomConfigurationFiles }}
        - mountPath: {{ .Values.frontend.customConfigurationMountPath }}
          name: {{ .Values.frontend.name }}-volume
      {{- end }}
      volumes:
    {{- if .Values.frontend.useCustomConfigurationFiles }}
      - name: {{ .Values.frontend.name }}-volume
      {{- if eq .Values.frontend.customConfigurationLocation "s3"}}
        emptyDir: {}
      {{- else if eq .Values.frontend.customConfigurationLocation "local"}}
        persistentVolumeClaim:
          claimName: {{ .Values.frontend.name }}-claim
      {{- end }}
    {{- end }}
      - name: secrets-store-inline
      {{- if .Values.secretProvider }}
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.frontend.spcName | quote }}
      {{ else }}
        secret:
          secretName: {{ .Values.frontend.client_id_secretName | quote }}
      {{- end }}