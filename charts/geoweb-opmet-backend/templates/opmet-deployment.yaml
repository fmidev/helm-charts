apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.opmet.name }}
  labels:
    app: {{ .Values.opmet.name }}
spec:
  replicas: {{ .Values.opmet.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.opmet.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.opmet.name }}
      annotations:
        eks.amazonaws.com/compute-type: ec2
      {{- if .Values.opmet.commitHash }}
        commitHash: {{ .Values.opmet.commitHash }}
      {{- end }}
    spec:
    {{- if eq .Values.secretProvider "aws" }}
      serviceAccountName: {{ .Values.opmet.secretServiceAccount }}
    {{- end }}
      containers:
      - name: {{ .Values.opmet.name }}
        image: {{ .Values.opmet.registry }}:{{ .Values.versions.opmet }}
      {{- if .Values.opmet.imagePullPolicy }}
        imagePullPolicy: {{ .Values.opmet.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.opmet.env.OPMET_BACKEND_PORT_HTTP }}
      {{- if .Values.opmet.resources }}
        resources: {{ toYaml .Values.opmet.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.livenessProbe }}
        livenessProbe: {{ toYaml .Values.opmet.livenessProbe | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.readinessProbe }}
        readinessProbe: {{ toYaml .Values.opmet.readinessProbe | nindent 10 }}
      {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.opmet.name }}
        env:
        - name: PG_PASS
          valueFrom:
            secretKeyRef:
              name: geoweb.opmet-db.credentials.postgresql.acid.zalan.do
              key: password
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: geoweb.opmet-db.credentials.postgresql.acid.zalan.do
              key: username
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
        command: ["/bin/sh"]
        args: ["-c", "sleep 30; export SQLALCHEMY_DATABASE_URL='postgresql://$(PG_USER):$(PG_PASS)@opmet-db:5432/opmet'; gunicorn --bind 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker --log-config opmet_logging.conf opmet_backend.main:app"]
      - name: {{ .Values.opmet.messageconverter.name }}
        image: {{ .Values.opmet.messageconverter.registry }}:{{ .Values.opmet.messageconverter.version }}
      {{- if .Values.opmet.imagePullPolicy }}
        imagePullPolicy: {{ .Values.opmet.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.opmet.messageconverter.port }}
      {{- if .Values.opmet.messageconverter.resources }}
        resources: {{ toYaml .Values.opmet.messageconverter.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.messageconverter.livenessProbe }}
        livenessProbe: {{ toYaml .Values.opmet.messageconverter.livenessProbe | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.messageconverter.readinessProbe }}
        readinessProbe: {{ toYaml .Values.opmet.messageconverter.readinessProbe | nindent 10 }}
      {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.opmet.name }}
      - name: {{ .Values.opmet.publisher.name }}
        image: {{ .Values.opmet.publisher.registry }}:{{ .Values.versions.opmet }}
      {{- if .Values.opmet.imagePullPolicy }}
        imagePullPolicy: {{ .Values.opmet.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.opmet.publisher.port }}
      {{- if .Values.opmet.publisher.resources }}
        resources: {{ toYaml .Values.opmet.publisher.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.publisher.livenessProbe }}
        livenessProbe: {{ toYaml .Values.opmet.publisher.livenessProbe | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.publisher.readinessProbe }}
        readinessProbe: {{ toYaml .Values.opmet.publisher.readinessProbe | nindent 10 }}
      {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.opmet.publisher.name }}
        volumeMounts:
        - name: publisher-volume
          mountPath: {{ .Values.opmet.publisher.DESTINATION | quote }}
      - name: {{ .Values.opmet.nginx.name }}
        image: {{ .Values.opmet.nginx.registry }}:{{ .Values.versions.opmet }}
      {{- if .Values.opmet.imagePullPolicy }}
        imagePullPolicy: {{ .Values.opmet.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.opmet.nginx.NGINX_PORT_HTTP }}
      {{- if .Values.opmet.nginx.resources }}
        resources: {{ toYaml .Values.opmet.nginx.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.nginx.livenessProbe }}
        livenessProbe: {{ toYaml .Values.opmet.nginx.livenessProbe | nindent 10 }}
      {{- end }}
      {{- if .Values.opmet.nginx.readinessProbe }}
        readinessProbe: {{ toYaml .Values.opmet.nginx.readinessProbe | nindent 10 }}
      {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.opmet.nginx.name }}
      {{- if .Values.opmet.db.enableDefaultDb }}
      - name: {{ .Values.opmet.db.name }}
        image: {{ .Values.opmet.db.image }}
        ports:
          - containerPort: {{ .Values.opmet.db.port }}
        env:
          - name: POSTGRES_DB
            value: {{ .Values.opmet.db.POSTGRES_DB }}
          - name: POSTGRES_USER
            value: {{ .Values.opmet.db.POSTGRES_USER }}
          - name: POSTGRES_PASSWORD
            value: {{ .Values.opmet.db.POSTGRES_PASSWORD }}
      {{- end }}
      volumes:
      - name: secrets-store-inline
      {{- if .Values.secretProvider }}
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.opmet.spcName | quote }}
      {{- else }}
        secret:
          secretName: {{ .Values.opmet.db_secretName | quote }}
      {{- end }}
      - name: publisher-volume
      {{- if .Values.opmet.publisher.volumeOptions }}
        {{- toYaml .Values.opmet.publisher.volumeOptions | nindent 8 }}
      {{- else }}
        emptyDir:
      {{- end }}