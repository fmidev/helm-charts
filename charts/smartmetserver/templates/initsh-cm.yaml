apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.smartmetserver.name }}-init-sh
  labels:
    app: {{ .Values.smartmetserver.name }}
  namespace: {{ .Release.Namespace }}
data:
  insert_geonames.sh: |
    #!/usr/bin/env bash
    set -e
    
    POSTGRES_DB='names'
    
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE TEMPORARY TABLE temp_geoname (
       geonameid int,
       name varchar(200),
       asciiname varchar(200),
       alternatenames text,
       latitude float,
       longitude float,
       fclass char(1),
       fcode varchar(10),
       country varchar(2),
       cc2 varchar(200),
       admin1 varchar(20),
       admin2 varchar(80),
       admin3 varchar(20),
       admin4 varchar(20),
       population bigint,
       elevation int,
       dem int,
       timezone varchar(40),
       moddate date
    );
    
    COPY temp_geoname (
       geonameid,
       name,
       asciiname,
       alternatenames,
       latitude,
       longitude,
       fclass,
       fcode,
       country,
       cc2,
       admin1,
       admin2,
       admin3,
       admin4,
       population,
       elevation,
       dem,
       timezone,
       moddate
    )
    {{- if eq (lower .Values.postgres.geonames_file) "all" }}
    FROM '/workdir/names/allCountries.txt' NULL as '';
    {{- else if or (eq (len (trim .Values.postgres.geonames_file)) 2) (eq (len (trim .Values.postgres.geonames_file)) 3) }}
    FROM '/workdir/names/{{ upper .Values.postgres.geonames_file }}.txt' NULL as '';
    {{- else }}
    {{- fail "Value .Values.postgres.geonames_file must be ISO 639 countrycode or value all." }}
    {{- end }}
    
    INSERT INTO public.geonames (
       id,
       "name",
       ansiname,
       lat,
       lon,
       "class",
       features_code,
       countries_iso2,
       cc2,
       admin1,
       admin2,
       admin3,
       admin4,
       population,
       elevation,
       dem,
       timezone,
       modified
    )
    SELECT
       geonameid,
       name,
       asciiname,
       latitude,
       longitude,
       fclass,
       fcode,
       country,
       cc2,
       admin1,
       admin2,
       admin3,
       admin4,
       population,
       elevation,
       dem,
       timezone,
       moddate
    FROM temp_geoname;

    DROP TABLE temp_geoname;

    CREATE TEMPORARY TABLE temp_alternate_geonames (
      id int4 NOT NULL,
      geonames_id int4 NOT NULL,
      "language" varchar(100),
      name varchar(200) NOT NULL,
      preferred bool DEFAULT false,
      short bool DEFAULT false,
      colloquial bool DEFAULT false,
      historic bool DEFAULT false,
      "from" varchar(30),
      "to" varchar(30) 
    );

    COPY temp_alternate_geonames (
      id,
      geonames_id,
      "language",
      name,
      preferred,
      short,
      colloquial,
      historic,
      "from",
      "to"
    )
    {{- if eq (lower .Values.postgres.geonames_file) "all" }}
    FROM '/workdir/alternate/alternateNamesV2.txt' NULL as '';
    {{- else if or (eq (len (trim .Values.postgres.geonames_file)) 2) (eq (len (trim .Values.postgres.geonames_file)) 3) }}
    FROM '/workdir/alternate/{{ upper .Values.postgres.geonames_file }}.txt' NULL as '';
    {{- else }}
    {{- fail "Value .Values.postgres.geonames_file must be ISO 639 countrycode or value all." }}
    {{- end }}

    INSERT INTO public.alternate_geonames (
      id,
      geonames_id,
      "language",
      name,
      preferred,
      short,
      colloquial,
      historic
    )
    SELECT
      id,
      geonames_id,
      COALESCE("language", '') AS language,
      name,
      COALESCE(preferred, false) AS preferred,
      COALESCE(short, false) AS short,
      COALESCE(colloquial, false) AS colloquial,
      COALESCE(historic, false) AS historic
    FROM temp_alternate_geonames;

    DROP TABLE temp_alternate_geonames;
    
    EOSQL
    
