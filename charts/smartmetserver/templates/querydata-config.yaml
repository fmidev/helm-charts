apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "smartmetserver.fullname" . }}-querydata-config
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "smartmetserver.labels.component" (merge (dict "component" "configuration") .) | nindent 4 }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
data:
  querydata.conf: |
    {{- if and (kindIs "map" .Values.smartmetConf.querydata) .Values.smartmetConf.querydata.raw }}
    {{- .Values.smartmetConf.querydata.raw | nindent 4 }}
    {{- else if and (kindIs "map" .Values.smartmetConf.querydata) .Values.smartmetConf.querydata.producers }}
    {{- $basePath := .Values.smartmetConf.querydata.basePath | default "/smartmet/data" }}
    {{- $defaultArea := .Values.smartmetConf.querydata.defaultArea | default "world" }}
    {{- $defaults := .Values.smartmetConf.querydata.defaults | default dict }}
    {{- $globalForecast := $defaults.forecast | default true }}
    {{- $globalType := $defaults.type | default "grid" }}
    {{- $globalRefreshInterval := $defaults.refresh_interval_secs | default 60 }}
    {{- $globalNumberToKeep := $defaults.number_to_keep | default 4 }}
    {{- $globalMultifile := $defaults.multifile | default false }}
    {{- $globalAlias := $defaults.alias | default "" }}
    // QueryData Engine Configuration
    // Generated by Helm Chart {{ .Chart.Name }}-{{ .Chart.Version }}
    
    @include "querydata/translations.conf"
    
    verbose = {{ .Values.smartmetConf.server.verbose }};
    
    # Where to cache valid points
    valid_points_cache_dir = "/var/smartmet/cache/validpoints";
    
    # Producer configurations
    producers = [
    {{- $producerList := list }}
    {{- range .Values.smartmetConf.querydata.producers }}
      {{- $producerName := .name }}
      {{- range $levelName, $levelConfig := .levels }}
        {{- $producerList = append $producerList (printf "%s_%s" $producerName $levelName) }}
      {{- end }}
    {{- end }}
    {{- range $i, $producer := $producerList }}
      {{- if $i }}, {{ end }}"{{ $producer }}"
    {{- end }}
    ];
    {{- range .Values.smartmetConf.querydata.producers }}
    {{- $producerName := .name }}
    {{- $producerArea := .area | default $defaultArea }}
    {{- $producerForecast := .forecast }}
    {{- if eq ($producerForecast | toString) "<nil>" }}
      {{- $producerForecast = $globalForecast }}
    {{- end }}
    {{- $producerType := .type | default $globalType }}
    {{- $producerMultifile := .multifile }}
    {{- $producerMultifileSet := false }}
    {{- if hasKey . "multifile" }}
      {{- $producerMultifileSet = true }}
    {{- else if eq ($producerMultifile | toString) "<nil>" }}
      {{- $producerMultifile = $globalMultifile }}
      {{- $producerMultifileSet = true }}
    {{- end }}
    {{- range $levelName, $levelConfig := .levels }}
    {{- $levelForecast := $levelConfig.forecast }}
    {{- if eq ($levelForecast | toString) "<nil>" }}
      {{- $levelForecast = $producerForecast }}
    {{- end }}
    {{- $levelType := $levelConfig.type | default $producerType }}
    {{- $levelRefreshInterval := $levelConfig.refresh_interval_secs | default $globalRefreshInterval }}
    {{- $levelNumberToKeep := $levelConfig.number_to_keep | default $globalNumberToKeep }}
    {{- $levelMultifile := $producerMultifile }}
    {{- $levelMultifileSet := $producerMultifileSet }}
    {{- if hasKey $levelConfig "multifile" }}
      {{- $levelMultifileSet = true }}
      {{- $levelMultifile = $levelConfig.multifile }}
    {{- end }}
    {{- $levelAlias := $levelConfig.alias }}
    {{- if eq ($levelAlias | toString) "<nil>" }}
      {{- $levelAlias = $globalAlias }}
    {{- end }}
    
    {{ $producerName }}_{{ $levelName }}:
    {
    {{- if or (kindIs "string" $levelAlias) (kindIs "slice" $levelAlias) }}
      {{- if or (and (kindIs "string" $levelAlias) (ne $levelAlias "")) (and (kindIs "slice" $levelAlias) (gt (len $levelAlias) 0)) }}
        {{- if kindIs "string" $levelAlias }}
        alias = "{{ $levelAlias }}";
        {{- else }}
        alias = [{{- range $i, $a := $levelAlias }}{{- if $i }}, {{ end }}"{{ $a }}"{{- end }}];
        {{- end }}
      {{- end }}
    {{- end }}
        directory = "{{ $basePath }}/{{ $producerName }}/{{ $producerArea }}/{{ $levelName }}/querydata";
        pattern = ".*_{{ $producerName }}_.*_{{ $levelName }}\.sqd$";
        forecast = {{ $levelForecast }};
        type = "{{ $levelType }}";
        leveltype = "{{ $levelName }}";
        refresh_interval_secs = {{ $levelRefreshInterval }};
        number_to_keep = {{ $levelNumberToKeep }};
    {{- if and $levelMultifileSet (ne ($levelMultifile | toString) "<nil>") }}
        multifile = {{ $levelMultifile }};
    {{- end }}
    };
    {{- end }}
    {{- end }}
    {{- else if and (kindIs "map" .Values.smartmetConf.querydata) (hasKey .Values.smartmetConf.querydata "producers") }}
    // QueryData Engine Configuration
    // Generated by Helm Chart {{ .Chart.Name }}-{{ .Chart.Version }}
    
    @include "querydata/translations.conf"
    
    verbose = {{ .Values.smartmetConf.server.verbose }};
    
    # Where to cache valid points
    valid_points_cache_dir = "/var/smartmet/cache/validpoints";
    
    # Producer configurations (empty list - no producers configured)
    producers = [];
    {{- else if .Values.smartmetConf.querydata }}
    {{- .Values.smartmetConf.querydata | nindent 4 }}
    {{- else }}
    // QueryData Engine Configuration
    // Generated by Helm Chart {{ .Chart.Name }}-{{ .Chart.Version }}
    
    @include "querydata/translations.conf"
    
    verbose = {{ .Values.smartmetConf.server.verbose }};
    
    # Where to cache valid points
    valid_points_cache_dir = "/var/smartmet/cache/validpoints";
    
    # Default producers configuration
    # Note: order is significant
    producers = [];
    
    # Add your producer configurations here
    # Example:
    # producers = ["example_surface", "example_pressure"];
    # 
    # example_surface:
    # {
    #     directory = "/smartmet/data/example/surface/querydata";
    #     pattern = ".*_example_.*_surface\.sqd$";
    #     forecast = true;
    #     type = "grid";
    #     leveltype = "surface";
    #     refresh_interval_secs = 60;
    #     number_to_keep = 4;
    #     multifile = true;
    # };
    {{- end }}