{{- if and (eq .Values.volume.provisioning "static") (eq .Values.volume.type "cephfs") }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.volume.cephfs.pv.name }}
  labels:
    {{- include "smartmetserver.labels.component" (merge (dict "component" "storage") .) | nindent 4 }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  capacity:
    storage: {{ .Values.volume.cephfs.pv.capacity }}
  accessModes: ["ReadOnlyMany"]
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""  # Empty string for static provisioning
  mountOptions:
    - context=system_u:object_r:container_file_t:s0
  csi:
    driver: cephfs.csi.ceph.com
    volumeHandle: cephfs-smartmet-data
    volumeAttributes:
      staticVolume: "true"
      fsName: {{ .Values.volume.cephfs.pv.fsName }}
      rootPath: {{ .Values.volume.cephfs.pv.rootPath }}
      clusterID: {{ .Values.volume.cephfs.pv.clusterID }}
    nodeStageSecretRef:
      name: {{ .Values.volume.cephfs.pv.secretName }}
      namespace: {{ .Values.volume.cephfs.pv.secretNamespace }}
{{- else if and (eq .Values.volume.provisioning "static") (eq .Values.volume.type "hostPath") }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.volume.hostPath.pv.name }}
  labels:
    {{- include "smartmetserver.labels.component" (merge (dict "component" "storage") .) | nindent 4 }}
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  capacity:
    storage: {{ .Values.volume.hostPath.pvc.storage }}
  accessModes:
    - {{ .Values.volume.hostPath.pvc.accessModes }}
  persistentVolumeReclaimPolicy: Retain
  storageClassName: {{ .Values.volume.hostPath.pv.storageClassName }}
  hostPath:
    path: {{ .Values.volume.hostPath.path | quote }}
    type: DirectoryOrCreate
{{- end }}
