apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "smartmetserver.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "smartmetserver.labels" . | nindent 4 }}
    app.kubernetes.io/component: application
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.smartmetserver.replicas }}
  selector:
    matchLabels:
      {{- include "smartmetserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "smartmetserver.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seLinuxOptions:
          level: "s0"
      containers:
      - name: {{.Values.smartmetserver.name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- if .Values.image.pullPolicy }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- end }}
        command: ["/usr/sbin/smartmetd"]
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - containerPort: {{ .Values.smartmetserver.containerPort }}
        volumeMounts:
        - mountPath: "/smartmet/data"
          name: smartmetserver-volume
          readOnly: {{ .Values.volume.readOnly }}
        - mountPath: "/etc/smartmet/smartmet.conf"
          subPath: "smartmet.conf"
          name: smartmet-configuration
        - mountPath: "/var/smartmet/cache"
          name: cache-volume
        livenessProbe:
          httpGet:
            path: /info?what=qengine
            port: {{ .Values.smartmetserver.containerPort }}
          periodSeconds: {{ .Values.smartmetserver.livenessProbe.periodSeconds }}
        readinessProbe:
          httpGet:
            path: /wms?request=getCapabilities&service=WMS
            port: {{ .Values.smartmetserver.containerPort }}
          failureThreshold: {{ .Values.smartmetserver.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.smartmetserver.readinessProbe.periodSeconds }}
        startupProbe:
          httpGet:
            path: /info?what=qengine
            port: {{ .Values.smartmetserver.containerPort }}
          failureThreshold: {{ .Values.smartmetserver.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.smartmetserver.startupProbe.periodSeconds }}
      volumes:
      - name: smartmetserver-volume
        {{- if eq .Values.volume.type "cephfs" }}
        persistentVolumeClaim:
          claimName: {{ .Values.volume.cephfs.pvc.name }}
        {{- else if eq .Values.volume.type "nfs" }}
        nfs:
          server: {{ .Values.volume.nfs.server }}
          path: {{ .Values.volume.nfs.path }}
          readOnly: {{ .Values.volume.readOnly }}
        {{- else if eq .Values.volume.type "hostPath" }}
        persistentVolumeClaim:
          claimName: {{ .Values.volume.hostPath.pvc.name }}
        {{- else }}
        {{- fail "volume.type must be one of: cephfs, nfs, hostPath" }}
        {{- end }}
      - name: smartmet-configuration
        configMap:
          name: {{ include "smartmetserver.fullname" . }}-config
      - name: cache-volume
        emptyDir: {}
