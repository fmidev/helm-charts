{{- if not .Values.postgres.external -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
spec:
  selector:
    app: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
  ports:
    - port: {{ .Values.postgres.svcPort }}
      targetPort: {{ .Values.postgres.containerPort }}
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
  labels:
    app: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
spec:
  serviceName: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.smartmetserver.name }}-{{ .Values.postgres.name }}
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.image }}
        {{- if .Values.postgres.pullPolicy }}
        imagePullPolicy: {{ .Values.postgres.pullPolicy }}
        {{- end }}
        env:
          - name: POSTGRES_PASSWORD
            value: {{ .Values.postgres.password }}
          - name: POSTGRES_USER
            value: {{ .Values.postgres.username }} 
        ports:
          - containerPort: {{ .Values.postgres.containerPort }}
        volumeMounts:
        - mountPath: "/var/lib/postgresql/data"
          name: postgres-volume
        - mountPath: "/docker-entrypoint-initdb.d/init.sql"
          subPath: "init.sql"
          name: initsql-cm
        - mountPath: "/docker-entrypoint-initdb.d/insert_geonames.sh"
          subPath: "insert_geonames.sh"
          name: initsh-cm
        - mountPath: "/workdir"
          name: load-emptydir
      initContainers:
        - name: load-geonames
          image: alpine:3.19
          command:
            - /bin/sh
            - -c
            - |
              set -x
              mkdir /workdir/names &&
              mkdir /workdir/alternate &&
              {{- if eq (lower .Values.postgres.geonames_file) "all" }}
              wget -O geonames.zip 'https://download.geonames.org/export/dump/allCountries.zip' &&
              wget -O alternate_names.zip 'https://download.geonames.org/export/dump/alternateNamesV2.zip' &&
              {{- else if or (eq (len (trim .Values.postgres.geonames_file)) 2) (eq (len (trim .Values.postgres.geonames_file)) 3) }}
              wget -O geonames.zip 'https://download.geonames.org/export/dump/{{ upper .Values.postgres.geonames_file }}.zip' &&
              wget -O alternate_names.zip 'https://download.geonames.org/export/dump/alternatenames/{{ upper .Values.postgres.geonames_file }}.zip' &&
              {{- else }}
              {{- fail "Value .Values.postgres.geonames_file must be ISO 639 countrycode or value all." }}
              {{- end }}
              unzip geonames.zip -d /workdir/names &&
              unzip alternate_names.zip -d /workdir/alternate
          volumeMounts:
            - mountPath: "/workdir"
              name: load-emptydir
      volumes:
      - name: postgres-volume
        persistentVolumeClaim:
          claimName: {{ .Values.postgres.name }}-{{ .Values.postgres.pvc.name }}
      - name: initsql-cm
        configMap:
          name: {{ .Values.smartmetserver.name }}-init-sql
      - name: initsh-cm
        configMap:
          name: {{ .Values.smartmetserver.name }}-init-sh
      - name: load-emptydir
        emptyDir: {}
{{- end }}
