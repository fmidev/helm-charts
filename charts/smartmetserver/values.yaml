image:
  repository: fmidev/smartmetserver
  pullPolicy: IfNotPresent
  tag: latest

smartmetserver:
  name: smartmetserver
  containerPort: 8080
  svcPort: 8080
  replicas: 2
  livenessProbe:
    periodSeconds: 30
    timeoutSeconds: 10
  readinessProbe:
    failureThreshold: 15
    periodSeconds: 10
    timeoutSeconds: 10
  startupProbe:
    failureThreshold: 10
    periodSeconds: 10
    timeoutSeconds: 5

ingress:
  enabled: true
  name: nginx-ingress
  ingressClassName: ""
  host: ""
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt

pv:
  enabled: true
  name: pv
  path: /tmp/smartmet-data

pvc:
  name: pvc
  storageClassName: hostpath-smartmet
  accessModes: ReadWriteOnce
  storage: 1Gi

hpa:
  name: hpa
  minReplicas: 1
  maxReplicas: 6
  targetCPUUtilizationPercentage: 60

postgres:
  external: false
  externalHost: ""
  externalPort: ""
  username: gis_user
  password: gis_pw
  name: postgres-statefulset
  image: postgres:12.14
  pullPolicy: IfNotPresent
  replicas: 1
  containerPort: 5432
  svcPort: 5432
  pv:
    enabled: true
    name: pv
    path: /tmp/smartmet-postgres
  pvc:
    name: pvc
    storageClassName: hostpath-postgres
    accessModes: ReadWriteOnce
    storage: 3Gi
  postgis:
    disable: true
    database: "gis"
  geonames:
    disable: true
    database: "names"

smartmetConfCm:
  name: smartmet-cnf
  smartmetConf: |
    // Bind to port
    port            = 8080;

    // Print access log
    defaultlogging  = false;
    logrequests     = true;
    accesslogdir    = "/var/log/smartmet";

    // Print configuration information when starting
    verbose         = true;

    // Print debug infromation
    debug           = true;

    lazylinking     = true;

    // Compress HTTP responses if possible
    compress = true;

    // Do not compress small responses
    compresslimit = 1000;

    slowpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };
    fastpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };

    engines:
    {
            sputnik:
            {
                    configfile = "engines/sputnik.conf";
            }
            contour:
            {
                    configfile = "engines/contour.conf";
            };
            geonames:
            {
                    configfile = "engines/geonames.conf";
                    disabled = false;
            };
            gis:
            {
                    configfile = "engines/gis.conf";
                    disabled = false;
            };
            querydata:
            {
                    configfile = "engines/querydata.conf";
            };
            grid:
            {
                    configfile = "engines/grid.conf";
            };
    };

    plugins:
    {
            admin:
            {
                    configfile = "plugins/admin.conf";
            };
            autocomplete:
            {
                    configfile = "plugins/autocomplete.conf";
            };
            download:
            {
                    configfile = "plugins/download.conf";
            };
            edr:
            {
                    configfile = "plugins/edr.conf";
            };
            timeseries:
            {
                    configfile = "plugins/timeseries.conf";
            };
            wms:
            {
                    configfile = "plugins/wms.conf";
            };
    };

