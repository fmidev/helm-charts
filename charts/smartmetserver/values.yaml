image:
  repository: fmidev/smartmetserver
  pullPolicy: IfNotPresent
  tag: latest

smartmetserver:
  name: smartmetserver
  containerPort: 8080
  svcPort: 8080
  replicas: 2
  livenessProbe:
    periodSeconds: 30
  readinessProbe:
    failureThreshold: 5
    periodSeconds: 60
  startupProbe:
    failureThreshold: 5
    periodSeconds: 60

ingress:
  name: nginx-ingress
  ingressClassName: ""
  host: ""

pv:
  enable: true
  name: pv
  path: /tmp/smartmet-data

pvc:
  name: pvc
  storageClassName: hostpath-smartmet
  accessModes: ReadWriteOnce
  storage: 1Gi

hpa:
  name: hpa
  minReplicas: 1
  maxReplicas: 6
  targetCPUUtilizationPercentage: 60

postgres:
  name: postgres-statefulset

postgrespv:
  enable: true
  name: pv
  path: /tmp/smartmet-postgres

postgrespvc:
  name: pvc
  storageClassName: hostpath-postgres
  accessModes: ReadWriteOnce
  storage: 3Gi

smartmetConfCm:
  name: smartmet-cnf
  smartmetConf: |
    // Bind to port
    port            = 8080;

    // Print access log
    defaultlogging  = false;
    logrequests     = true;
    accesslogdir    = "/var/log/smartmet";

    // Print configuration information when starting
    verbose         = true;

    // Print debug infromation
    debug           = true;

    lazylinking     = true;

    // Compress HTTP responses if possible
    compress = true;

    // Do not compress small responses
    compresslimit = 1000;

    slowpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };
    fastpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };

    engines:
    {
            sputnik:
            {
                    configfile = "engines/sputnik.conf";
            }
            contour:
            {
                    configfile = "engines/contour.conf";
            };
            geonames:
            {
                    configfile = "engines/geonames.conf";
                    disabled = false;
            };
            gis:
            {
                    configfile = "engines/gis.conf";
                    disabled = false;
            };
            querydata:
            {
                    configfile = "engines/querydata.conf";
            };
            grid:
            {
                    configfile = "engines/grid.conf";
            };
    };

    plugins:
    {
            admin:
            {
                    configfile = "plugins/admin.conf";
            };
            autocomplete:
            {
                    configfile = "plugins/autocomplete.conf";
            };
            download:
            {
                    configfile = "plugins/download.conf";
            };
            edr:
            {
                    configfile = "plugins/edr.conf";
            };
            timeseries:
            {
                    configfile = "plugins/timeseries.conf";
            };
            wms:
            {
                    configfile = "plugins/wms.conf";
            };
    };

gisConfCm:
  name: gis-conf
  gisConf: |
    crsDefinitionDir = "/etc/smartmet/engines/gis/crs";

    postgis:
    {
        # Enter Your postgres database connection data below
        disable	    = true;
        host		= "smartmetserver-postgres-statefulset";
        port		= 5432;
        database	= "gis";
        username	= "gis_user";
        password	= "gis_pw";
        encoding	= "UTF8";
    };

    cache:
    {
        max_size	= 1000;
    };

    gdal:
    {
        # Discard projected points which fall outside the valid area
        # for the spatial reference. For example eureffin is not valid
        # in the full area of EC Europe data

        OGR_ENABLE_PARTIAL_REPROJECTION	= "YES";

        # Seems to be the only way to properly disable error messages
        CPL_LOG	= "/dev/null";
    };

geonamesConfCm:
  name: geonames-conf
  geonamesConf: |
    # This is mostly for debugging
    
    verbose	= false;
    
    # Fix roadstation names to be splittable into words
    
    remove_underscores = true;
    
    # This affects autocomplete. For example using en_US would mean
    # Ä and A would be considered equivalent.
    
    locale = "fi_FI.UTF-8";
    
    # DEM data. If this is omitted, the dem value will always be NaN
    #demdir = "/smartmet/share/gis/rasters/viewfinder";
    
    # Do not use too high resolution data to avoid page faults
    # 0 meters = allow highest possible resolution
    # 50 meters disables Scandinavian 30 m data.
    # 100 disables global 90 meter data.
    
    maxdemresolution = 0;
    
    # LandCover data
    #landcoverdir = "/smartmet/share/gis/rasters/globcover";
    
    # Database settings. Do NOT use the full name, use the alias only
    # because different networks use different full host names but
    # the same alias.
    
    database:
    {
    	disable  = false;
    	host	 = "smartmetserver-postgres-statefulset";
    	user	 = "gis_user";
    	database = "names";
    	pass	 = "gis_pw";
    
    	# For quick memory leak tests with valgrind:
    	where:
    	{
    	#	geonames = "keyword='synop_fi'";
    	}
    
    };
    
    cache:
    {
    	# Cache maximum size
    	max_size	= 10000000;
    };
    
    
    # Priorities
    
    priorities:
    {
       # Divide population to get score
    
       populations:
       {
          FI = 2000;	// Finland
          AX = 2000;	// Aland
          EE = 10000;	// Estonia
          SE = 20000;	// Sweden
          NO = 20000;	// Norway
          DK = 20000;	// Denmark
          default = 100000;
          US = 100000;	// USA. 300000 would be too large!
          MX = 108000;	// Mexico
          JP = 128000;	// Japan
          RU = 142000;	// Russia
          NG = 155000;	// Nigeria
          BD = 162000;	// Bangladesh
          PK = 167000;	// Pakistan
          BR = 200000;	// Brazil
          ID = 230000;	// Indonesia
          IN = 1200000;	// India
          CN = 1300000;	// China
       };
    
       # Feature priorities
    
       features:
       {
    	default = "default_features";
    	FI	= "FI_features";
       };
    
       default_features:
       {
            PPLC    = 35;
    	SKI     = 28;
    	PPLA    = 25;
    	PPLG    = 25;
    	PPLA2	= 25;
    	PPLA3	= 25;
    	PPL     = 20;
    	ADM2    = 20;	# we do not know which ones are municipalities around the world
    	ADM3    = 20;
    	PPLX    = 19;
    	ADMD    = 14;
    	ISL     = 12;
    	POST    = 10;
    	default = 0;
       };
    
       FI_features:
       {
            PPLC    = 35;
    	SKI     = 28;
    	PPLA    = 25;
    	PPLG    = 25;
    	PPL     = 20;
    	PPLA2   = 20;
    	PPLA3   = 20;
    	PPLX    = 19;
    	ISL     = 12;
    	POST    = 10;
    	ADM1	= 0;	# Åland municipalities
    	ADM2	= 0;	# Obsolete category in Finland (only Åland is ADM2)
    	ADM3	= 2;	# Finland municipalities
    	ADMD    = 1;
    	default = 0;
       };
    
    
       # Areas
    
       areas:
       {
    	Helsinki = 2;
    	Espoo    = 1;
    	Vantaa   = 1;
    	Turku    = 1;
    	Tampere  = 1;
    	Oulu     = 1;
    	default  = 0;
       };
    
       # Countries
    
       countries:
       {
    	FI = 15;
    	AX = 15;
    	SE = 12;
    	NO = 10;
    	DK = 10;
    	EE = 9;
    	default = 0;
       };
    
    };

initSqlCm:
  name: init-sql
  initSql: |
    CREATE USER smartmet_server_db WITH PASSWORD 'smartmet_server_db';

    -- Database: names

    -- DROP DATABASE IF EXISTS names;

    CREATE DATABASE names
        WITH
        OWNER = smartmet_server_db
        ENCODING = 'UTF8'
        LC_COLLATE = 'en_US.utf8'
        LC_CTYPE = 'en_US.utf8'
        TABLESPACE = pg_default
        CONNECTION LIMIT = -1
        IS_TEMPLATE = False;

    ALTER DATABASE names
        SET search_path TO "$user", public, topology;

    -- Database: shapes

    -- DROP DATABASE IF EXISTS shapes;

    CREATE DATABASE shapes
        WITH
        OWNER = smartmet_server_db
        ENCODING = 'UTF8'
        LC_COLLATE = 'en_US.utf8'
        LC_CTYPE = 'en_US.utf8'
        TABLESPACE = pg_default
        CONNECTION LIMIT = -1
        IS_TEMPLATE = False;

    ALTER DATABASE shapes
        SET search_path TO "$user", public, tiger;

    \c names;

    -- public.alternate_geonames definition

    -- Drop table

    -- DROP TABLE public.alternate_geonames;

    CREATE TABLE public.alternate_geonames (
            id int4 NOT NULL,
            geonames_id int4 NOT NULL,
            "language" varchar(100) NOT NULL,
            name varchar(200) NOT NULL,
            preferred bool NOT NULL DEFAULT false,
            short bool NOT NULL DEFAULT false,
            colloquial bool NOT NULL DEFAULT false,
            historic bool NOT NULL DEFAULT false,
            priority int4 NOT NULL DEFAULT 50,
            "locked" bool NOT NULL DEFAULT false,
            last_modified timestamp NULL DEFAULT now()
    );
    CREATE INDEX idx_alternate_geonames_last_modified ON alternate_geonames USING btree (last_modified);
    CREATE INDEX idx_alternategeoid ON alternate_geonames USING btree (geonames_id);
    CREATE INDEX idx_alternatename ON alternate_geonames USING btree (name);
    CREATE INDEX idx_loweralternatename ON alternate_geonames USING btree (lower((name)::text));


    -- public.alternate_municipalities definition

    -- Drop table

    -- DROP TABLE public.alternate_municipalities;

    CREATE TABLE public.alternate_municipalities (
            id int4 NOT NULL,
            municipalities_id int4 NOT NULL,
            "name" varchar(200) NOT NULL,
            "language" varchar(10) NULL,
            CONSTRAINT alternate_municipalities_pkey PRIMARY KEY (id)
    );

    -- public.countries definition

    -- Drop table

    -- DROP TABLE public.countries;

    CREATE TABLE public.countries (
            iso2 bpchar(2) NOT NULL,
            iso3 bpchar(3) NOT NULL,
            iso_numeric int4 NULL,
            fips bpchar(2) NULL,
            "name" varchar(50) NOT NULL,
            capital varchar(100) NULL,
            areainsqkm float8 NULL,
            population int4 NULL,
            continent bpchar(2) NULL,
            tld bpchar(4) NULL,
            currency_code bpchar(3) NULL,
            currency_name varchar(20) NULL,
            phone varchar(20) NULL,
            postal_code_fmt varchar(60) NULL,
            postal_code_ngx varchar(200) NULL,
            languages varchar(100) NULL,
            geonames_id int4 NULL,
            neighbors varchar(75) NULL,
            CONSTRAINT countries_pkey PRIMARY KEY (iso2)
    );


    -- public.features definition

    -- Drop table

    -- DROP TABLE public.features;

    CREATE TABLE public.features (
            code varchar(8) NOT NULL,
            shortdesc varchar(50) NOT NULL DEFAULT ''::character varying,
            longdesc varchar(255) NOT NULL DEFAULT ''::character varying,
            "class" bpchar(1) NULL,
            CONSTRAINT features_pkey PRIMARY KEY (code)
    );

    -- public.geonames definition

    -- Drop table

    -- DROP TABLE public.geonames;

    CREATE TABLE public.geonames (
            id int4 NOT NULL,
            "name" varchar(200) NOT NULL,
            ansiname varchar(200) NULL DEFAULT ''::character varying,
            lat float8 NOT NULL,
            lon float8 NOT NULL,
            "class" bpchar(1) NULL DEFAULT NULL::bpchar,
            features_code varchar(10) NULL DEFAULT NULL::character varying,
            countries_iso2 varchar(2) NULL DEFAULT NULL::character varying,
            cc2 varchar(60) NULL,
            admin1 varchar(20) NULL DEFAULT NULL::character varying,
            admin2 varchar(80) NULL DEFAULT NULL::character varying,
            admin3 varchar(20) NULL DEFAULT NULL::character varying,
            admin4 varchar(20) NULL DEFAULT NULL::character varying,
            population int8 NULL DEFAULT 0,
            elevation int4 NULL,
            dem int4 NULL,
            timezone varchar(40) NULL DEFAULT NULL::character varying,
            modified date NOT NULL DEFAULT 'now'::text::date,
            municipalities_id int4 NOT NULL DEFAULT 0,
            priority int4 NOT NULL DEFAULT 50,
            "locked" bool NOT NULL DEFAULT false,
            last_modified timestamp NULL,
            landcover int4 NULL
    );
    CREATE INDEX idx_geonamecountry ON geonames USING btree (countries_iso2);
    CREATE INDEX idx_geonamefeature ON geonames USING btree (features_code);
    CREATE INDEX idx_last_modified ON geonames USING btree (last_modified);
    CREATE INDEX idx_lowername ON geonames USING btree (lower((name)::text));
    CREATE INDEX idx_name ON geonames USING btree (name);
    CREATE INDEX idx_population ON geonames USING btree (population);

    -- public.keywords definition

    -- Drop table

    -- DROP TABLE public.keywords;

    CREATE TABLE public.keywords (
            keyword varchar(50) NOT NULL,
            "comment" varchar(200) NULL DEFAULT ''::character varying,
            languages varchar(200) NULL DEFAULT ''::character varying,
            autocomplete bool NOT NULL DEFAULT false,
            CONSTRAINT keywords_pkey PRIMARY KEY (keyword)
    );

    -- public.keywords_has_geonames definition

    -- Drop table

    -- DROP TABLE public.keywords_has_geonames;

    CREATE TABLE public.keywords_has_geonames (
            keyword varchar(50) NOT NULL,
            geonames_id int4 NOT NULL,
            "comment" varchar(200) NULL DEFAULT ''::character varying,
            "name" varchar(200) NULL DEFAULT ''::character varying,
            last_modified timestamp NULL DEFAULT now(),
            CONSTRAINT keywords_has_geonames_pkey PRIMARY KEY (keyword, geonames_id),
            CONSTRAINT fk_keywords_has_geonames_keywords FOREIGN KEY (keyword) REFERENCES public.keywords(keyword)
    );
    CREATE INDEX idx_keywords_has_geonames_last_modified ON keywords_has_geonames USING btree (last_modified);

    -- public.languages definition

    -- Drop table

    -- DROP TABLE public.languages;

    CREATE TABLE public.languages (
            iso_639_3 bpchar(3) NOT NULL,
            iso_639_2 bpchar(3) NULL DEFAULT NULL::bpchar,
            iso_639_1 bpchar(2) NULL DEFAULT NULL::bpchar,
            "name" varchar(100) NOT NULL,
            CONSTRAINT languages_pkey PRIMARY KEY (iso_639_3)
    );

    -- public.municipalities definition

    -- Drop table

    -- DROP TABLE public.municipalities;

    CREATE TABLE public.municipalities (
            id int4 NOT NULL,
            countries_iso2 bpchar(2) NOT NULL,
            "name" varchar(200) NOT NULL,
            code int4 NULL,
            CONSTRAINT municipalities_pkey PRIMARY KEY (id),
            CONSTRAINT fk_municipalities_iso2 FOREIGN KEY (countries_iso2) REFERENCES public.countries(iso2)
    );

    -- public.spatial_ref_sys definition

    -- Drop table

    -- DROP TABLE public.spatial_ref_sys;

    CREATE TABLE public.spatial_ref_sys (
            srid int4 NOT NULL,
            auth_name varchar(256) NULL,
            auth_srid int4 NULL,
            srtext varchar(2048) NULL,
            proj4text varchar(2048) NULL,
            CONSTRAINT spatial_ref_sys_pkey PRIMARY KEY (srid),
            CONSTRAINT spatial_ref_sys_srid_check CHECK (((srid > 0) AND (srid <= 998999)))
    );

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO smartmet_server_db;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO smartmet_server_db;

