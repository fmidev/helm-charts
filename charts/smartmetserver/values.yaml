# Default values for smartmetserver chart.

# Chart name overrides
nameOverride: ""
fullnameOverride: ""

image:
  repository: fmidev/smartmetserver
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

smartmetserver:
  name: smartmetserver
  containerPort: 8080
  svcPort: 80
  replicas: 2
  livenessProbe:
    periodSeconds: 30
  readinessProbe:
    failureThreshold: 5
    periodSeconds: 60
  startupProbe:
    failureThreshold: 5
    periodSeconds: 60

# Service configuration
service:
  type: ClusterIP
  portName: http
  targetPort: 8080
  annotations: {}
  # sessionAffinity: ClientIP

ingress:
  enabled: false
  name: nginx-ingress
  ingressClassName: ""
  # List of hosts for the ingress
  hosts: []
    # - smartmetserver.example.com
  # Custom annotations for the ingress
  annotations: {}
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  # Custom paths configuration
  paths:
    - path: /
      pathType: Prefix
  tls:
    enabled: false
    secretName: smartmetserver-ingress-tls
    issuerRef:
      kind: ClusterIssuer
      name: letsencrypt

# Volume configuration for smartmet data
volume:
  # Volume type: "cephfs", "nfs", or "hostPath"
  type: hostPath
  # Whether the volume should be mounted as read-only
  readOnly: true
  # Provisioning mode: "static" (use existing PV) or "dynamic" (create new PV)
  provisioning: static
  
  # hostPath configuration (for local directory on node)
  hostPath:
    path: /tmp/smartmet-data
    # PV/PVC configuration for hostPath
    pv:
      name: smartmet-data-pv
      storageClassName: hostpath-smartmet
    pvc:
      name: smartmet-data-pvc
      accessModes: ReadWriteOnce
      storage: 1Gi
      # For dynamic provisioning, specify storageClassName
      storageClassName: hostpath-smartmet
    
  # NFS configuration
  nfs:
    server: 10.12.12.66
    path: /smartmet/data
    
  # CephFS configuration
  cephfs:
    # PV/PVC configuration for CephFS
    pv:
      name: smartmet-data-pv
      capacity: 10Ti  # Metadata only for existing volumes - adjust to match your actual volume size
      fsName: smartmet_data
      rootPath: /
      clusterID: smartmet-ceph
      secretName: cephfs-secret
      secretNamespace: ceph-csi
    pvc:
      name: smartmet-data-pvc
      capacity: 10Ti  # Must match PV capacity - adjust to match your actual volume size
      # For dynamic provisioning, specify storageClassName
      storageClassName: csi-cephfs

hpa:
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 60
  # Optional memory utilization target (uncomment to enable)
  # targetMemoryUtilizationPercentage: 70
  # Optional behavior configuration for fine-tuned scaling
  # behavior:
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #       - type: Percent
  #         value: 50
  #         periodSeconds: 60
  #   scaleUp:
  #     stabilizationWindowSeconds: 60
  #     policies:
  #       - type: Percent
  #         value: 100
  #         periodSeconds: 15

smartmetConfCm:
  smartmetConf: |
    // Bind to port
    port            = 8080;

    // Print access log
    defaultlogging  = false;
    logrequests     = true;
    accesslogdir    = "/var/log/smartmet";

    // Print configuration information when starting
    verbose         = true;

    // Print debug infromation
    debug           = true;

    lazylinking     = true;

    // Compress HTTP responses if possible
    compress = true;

    // Do not compress small responses
    compresslimit = 1000;

    slowpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };
    fastpool:
    {
            maxthreads = 24;
            maxrequeuesize = 100;
    };

    engines:
    {
            sputnik:
            {
                    configfile = "engines/sputnik.conf";
            }
            contour:
            {
                    configfile = "engines/contour.conf";
            };
            geonames:
            {
                    configfile = "engines/geonames.conf";
            };
            gis:
            {
                    configfile = "engines/gis.conf";
            };
            querydata:
            {
                    configfile = "engines/querydata.conf";
            };
            grid:
            {
                    configfile = "engines/grid.conf";
            };
    };

    plugins:
    {
            autocomplete:
            {
                    configfile = "plugins/autocomplete.conf";
            };
            download:
            {
                    configfile = "plugins/download.conf";
            };
            edr:
            {
                    configfile = "plugins/edr.conf";
            };
            timeseries:
            {
                    configfile = "plugins/timeseries.conf";
            };
            wms:
            {
                    configfile = "plugins/wms.conf";
            };
    };
