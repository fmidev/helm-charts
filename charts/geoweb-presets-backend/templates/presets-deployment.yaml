apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.presets.name }}
  labels:
    app: {{ .Values.presets.name }}
spec:
  replicas: {{ .Values.presets.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.presets.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.presets.name }}
      annotations:
        eks.amazonaws.com/compute-type: ec2
      {{- if .Values.presets.commitHash }}
        commitHash: {{ .Values.presets.commitHash }}
      {{- end }}
    spec:
    {{- if eq .Values.secretProvider "aws" }}
      serviceAccountName: {{ .Values.presets.secretServiceAccount }}
    {{- end }}
    {{- if and .Values.presets.useCustomWorkspacePresets (eq .Values.presets.customWorkspacePresetLocation "s3")}}
      initContainers:
      - name: init
        image: amazon/aws-cli
        command: ["/bin/sh"]
        args:
          - -c
          - |
            export AWS_ACCESS_KEY_ID={{ .Values.presets.awsAccessKeyId }};
            export AWS_SECRET_ACCESS_KEY={{ .Values.presets.awsAccessKeySecret }};
            AWS_DEFAULT_REGION={{ .Values.presets.awsDefaultRegion }};
            aws s3 cp --recursive s3://{{ .Values.presets.s3bucketName }}{{ .Values.presets.customPresetsPath }} /presets;
        volumeMounts:
        - mountPath: "/presets/"
          name: {{ .Values.presets.name }}-volume
    {{- end }}
      containers:
      - name: {{ .Values.presets.name }}
        image: {{ .Values.presets.registry }}:{{ .Values.versions.presets }}
      {{- if .Values.presets.imagePullPolicy }}
        imagePullPolicy: {{ .Values.presets.imagePullPolicy }}
      {{- end }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "python cli.py enable-alembic; alembic upgrade head"]
        ports:
        - containerPort: {{ .Values.presets.PRESETS_PORT_HTTP }}
        envFrom:
        - configMapRef:
            name: {{ .Values.presets.name }}
        env:
        - name: PRESETS_BACKEND_DB
          valueFrom:
            secretKeyRef:
              name: {{ .Values.presets.db_secretName }}
              key: PRESETS_BACKEND_DB
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      {{- if and .Values.presets.useCustomWorkspacePresets }}
        - mountPath: "/app/staticpresets"
          name: {{ .Values.presets.name }}-volume
      {{- end }}
      - name: {{ .Values.presets.nginx.name }}
        image: {{ .Values.presets.nginx.registry }}:{{ .Values.versions.presets }}
      {{- if .Values.presets.imagePullPolicy }}
        imagePullPolicy: {{ .Values.presets.imagePullPolicy }}
      {{- end }}
        ports:
        - containerPort: {{ .Values.presets.nginx.NGINX_PORT_HTTP }}
        envFrom:
        - configMapRef:
            name: {{ .Values.presets.nginx.name }}
      volumes:
    {{- if .Values.presets.useCustomWorkspacePresets}}
      - name: {{ .Values.presets.name }}-volume
      {{- if eq .Values.presets.customWorkspacePresetLocation "s3"}}
        emptyDir: {}
      {{- else if eq .Values.presets.customWorkspacePresetLocation "local"}}
        persistentVolumeClaim:
          claimName: {{ .Values.presets.name }}-claim
      {{- end }}
    {{- end }}
      - name: secrets-store-inline
      {{- if .Values.secretProvider }}
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.presets.spcName | quote }}
      {{- else }}
        secret:
          secretName: {{ .Values.presets.db_secretName | quote }}
      {{- end }}